import * as std from "std";

export default function (): std.Recipe<std.Directory> {
  // Compile main.c to bin/hello:
  // - gcc comes from `std.toolchain`
  // - `workDir` is used to bring in the `src` directory
  // - `outputScaffold` is used to create the directory structure for the output
  // - `std.withRunnableLink` is used to symlink the binary that will be called with `brioche run`
  return std.runBash`
    gcc -o "$BRIOCHE_OUTPUT/bin/hello" src/main.c
  `
    .dependencies(std.toolchain)
    .workDir(Brioche.glob("src"))
    .outputScaffold(std.directory({ bin: std.directory() }))
    .toDirectory()
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/hello"));
}
